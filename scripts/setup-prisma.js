/**
 * Script para configurar o Prisma em um monorepo PNPM
 * Executar com: node scripts/setup-prisma.js
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configura√ß√µes
const backendDir = path.join(__dirname, '..', 'core-backend');
const prismaDir = path.join(backendDir, 'prisma');

// Fun√ß√£o para execu√ß√£o de comandos
function exec(command, cwd = backendDir) {
  console.log(`\nüîß Executando: ${command}`);
  try {
    return execSync(command, { cwd, stdio: 'inherit' });
  } catch (error) {
    console.error(`\n‚ùå Erro ao executar: ${command}`);
    console.error(error.message);
    return false;
  }
}

// Fun√ß√£o para verificar exist√™ncia de arquivos/diret√≥rios
function checkExists(filePath, type = 'arquivo') {
  if (!fs.existsSync(filePath)) {
    console.error(`\n‚ùå ERRO: ${type} n√£o encontrado: ${filePath}`);
    process.exit(1);
  }
  return true;
}

// Banner
console.log('\n=============================================');
console.log('üîß CONFIGURA√á√ÉO DO PRISMA EM MONOREPO PNPM üîß');
console.log('=============================================\n');

// 1. Verificar ambiente
console.log('üîç Verificando ambiente...');
checkExists(backendDir, 'diret√≥rio do backend');
checkExists(prismaDir, 'diret√≥rio prisma');
checkExists(path.join(prismaDir, 'schema.prisma'), 'schema.prisma');
console.log('‚úÖ Ambiente verificado com sucesso');

// 2. Limpar caches potencialmente problem√°ticos
console.log('\nüßπ Limpando caches...');
try {
  // Remover pastas de cache que podem estar causando problemas
  const cacheFolders = [
    path.join(backendDir, 'node_modules', '.prisma'),
    path.join(backendDir, 'node_modules', '.pnpm', '@prisma+client*'),
    path.join(backendDir, 'node_modules', '.pnpm', 'prisma*')
  ];
  
  for (const folder of cacheFolders) {
    if (fs.existsSync(folder)) {
      console.log(`Removendo: ${folder}`);
      execSync(`rm -rf "${folder}"`);
    }
  }
  console.log('‚úÖ Caches limpos com sucesso');
} catch (error) {
  console.warn('\n‚ö†Ô∏è Aviso ao limpar caches:', error.message);
  console.log('Continuando com a configura√ß√£o...');
}

// 3. Reinstalar depend√™ncias do Prisma
console.log('\nüì¶ Reinstalando depend√™ncias do Prisma...');
if (exec('pnpm install -D prisma', backendDir) && 
    exec('pnpm install @prisma/client', backendDir)) {
  console.log('‚úÖ Depend√™ncias reinstaladas com sucesso');
} else {
  console.error('\n‚ùå Erro ao reinstalar depend√™ncias');
  process.exit(1);
}

// 4. Gerar cliente Prisma
console.log('\nüîÑ Gerando cliente Prisma...');
if (exec('pnpm prisma generate', backendDir)) {
  console.log('‚úÖ Cliente Prisma gerado com sucesso');
} else {
  console.error('\n‚ùå Erro ao gerar cliente Prisma');
  process.exit(1);
}

// 5. Verificar conex√£o com banco de dados
console.log('\nüîå Verificando conex√£o com banco de dados...');
try {
  if (exec('pnpm prisma db pull --force', backendDir)) {
    console.log('‚úÖ Conex√£o com banco de dados OK');
  } else {
    throw new Error('Falha ao conectar ao banco de dados');
  }
} catch (error) {
  console.error('\n‚ùå Erro ao conectar ao banco de dados:', error.message);
  console.log('\nVerifique se:');
  console.log('1. O arquivo .env existe com DATABASE_URL configurado corretamente');
  console.log('2. O banco de dados est√° em execu√ß√£o e acess√≠vel');
  console.log('3. As credenciais est√£o corretas');
  process.exit(1);
}

// 6. Perguntar sobre execu√ß√£o de migra√ß√µes
const shouldMigrate = process.argv.includes('--migrate');
if (shouldMigrate) {
  console.log('\nüöÄ Executando migra√ß√µes...');
  if (exec('pnpm prisma migrate dev', backendDir)) {
    console.log('‚úÖ Migra√ß√µes aplicadas com sucesso');
  } else {
    console.error('\n‚ùå Erro ao aplicar migra√ß√µes');
    process.exit(1);
  }
}

// Conclus√£o
console.log('\n\n‚úÖ‚úÖ‚úÖ CONFIGURA√á√ÉO DO PRISMA CONCLU√çDA COM SUCESSO! ‚úÖ‚úÖ‚úÖ');
console.log('\nComandos √∫teis:');
console.log('- pnpm prisma:studio          # Interface visual do banco de dados');
console.log('- pnpm prisma:migrate         # Criar/aplicar migra√ß√µes');
console.log('- pnpm prisma:generate        # Regenerar cliente Prisma');
console.log('\nSe ainda encontrar problemas:');
console.log('1. Tente remover node_modules recursivamente e reinstalar');
console.log('2. Verifique se a vers√£o do Prisma √© compat√≠vel em todos os pacotes');
console.log('3. Execute pnpm prisma generate novamente ap√≥s altera√ß√µes no schema\n');